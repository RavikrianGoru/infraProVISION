function renderTree(treeData) {
			const colorByStatus = {
				"Active": "green",
				"Completed": "green",
				"DAO Approed": "green",
				"Application HandOver": "green",
				"Decommissioned": "red",
				"Case Closed": "red",
				"Case Decommissioned": "red",
				"Case Rejected": "red",
				"DAO Rejected": "red",
				"Rejected": "red",
				"winthdraw": "red",
				"Soulution Engineer Rejected": "red",
				"Cancelled": "red",
				"Case Cancelled": "red",
				"IDR Review": "blue",
				"Provisioning": "blue",
				"Solutioning": "blue",
				"Solutioning Only": "blue",
				"Solutioning STP": "blue",
				"In Progress": "blue"
			};

			const margin = {top: 20, right: 120, bottom: 20, left: 120},
				width = 960 - margin.right - margin.left,
				height = 600 - margin.top - margin.bottom;

			const svg = d3.select("#tree-container").append("svg")
				.attr("width", width + margin.right + margin.left)
				.attr("height", height + margin.top + margin.bottom)
				.append("g")
				.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

			const root = d3.hierarchy(treeData, d => d.childs);

			const treeLayout = d3.tree().size([height, width]);

			treeLayout(root);

			const link = svg.selectAll(".link")
				.data(root.links())
				.enter().append("path")
				.attr("class", "link")
				.attr("d", d3.linkHorizontal()
					.x(d => d.y)
					.y(d => d.x));

			const node = svg.selectAll(".node")
				.data(root.descendants())
				.enter().append("g")
				.attr("class", "node")
				.attr("transform", d => `translate(${d.y},${d.x})`);

			const tooltip = d3.select("#tooltip");

			node.append("a")
				.attr("xlink:href", d => d.data.url)
				.append("circle")
				.attr("r", 10)
				.attr("fill", d => colorByStatus[d.data.status] || 'steelblue')
				.on("mouseover", (event, d) => {
					const dataContent = d.data.data ? Object.entries(d.data.data).map(([key, value]) => `${key}: ${value}`).join('<br>') : 'No data available';
					tooltip.transition()
						.duration(200)
						.style("opacity", .9);
					tooltip.html(`Name: ${d.data.name}<br>Status: ${d.data.status}<br>URL: <a href="${d.data.url}" target="_blank">${d.data.url}</a><br>Data:<br>${dataContent}`)
						.style("left", (event.pageX + 5) + "px")
						.style("top", (event.pageY - 28) + "px");
				})
				.on("mouseout", () => {
					tooltip.transition()
						.duration(500)
						.style("opacity", 0);
				});

			node.append("text")
				.attr("dy", 3)
				.attr("x", d => d.data.childs && d.data.childs.length ? -12 : 12)
				.style("text-anchor", d => d.data.childs && d.data.childs.length ? "end" : "start")
				.text(d => d.data.id);
		}